# SucoiDownload 字幕模块设计文档

## 1. 背景与目标

**SucoiDownload** 是一个基于 Python 和 Tkinter 构建的模块化视频下载器，当前支持从 YouTube、TikTok 等平台下载视频。用户是一家自媒体公司，业务需求是将中英文视频搬运到日本网站进行本土化二次创作，涉及下载视频、提取或生成字幕、校准字幕质量，并翻译为日语（未来可能扩展到其他语言）。现有功能需扩展以支持字幕相关的操作。

### 目标
- **字幕下载**：从支持的视频平台（如 YouTube、bilibili）下载字幕（SRT 格式），支持用户指定语言。
- **字幕生成**：对于无字幕的视频，通过语音识别（ASR）生成字幕。
- **字幕校准与翻译**：提供接口给大语言模型（LLM）进行字幕校准（修正错误）和翻译（当前为日语，未来可扩展）。
- **用户体验**：在 UI 中添加字幕设置选项，支持用户启用/禁用字幕下载、选择语言，以及触发校准和翻译。

---

## 2. 功能需求

### 2.1 字幕下载
- **功能**：从视频平台下载字幕（优先 SRT 格式），支持用户指定语言（例如 `en,zh-CN,ja` 或 `all`）。
- **输入**：
  - 视频 URL。
  - 用户设置：是否下载字幕、目标语言列表。
- **输出**：SRT 格式字幕文件，存储在视频下载目录中（与视频文件同名）。
- **支持平台**：YouTube、bilibili、TikTok（视平台支持情况）。

### 2.2 字幕生成
- **功能**：对于无字幕的视频，使用语音识别（ASR）生成字幕。
- **输入**：
  - 视频文件路径（已下载）。
  - 视频主要语言（用户可选，默认自动检测）。
- **输出**：SRT 格式字幕文件。
- **工具**：使用开源 ASR 模型（如 Whisper）进行语音识别。

### 2.3 字幕校准与翻译
- **功能**：
  - **校准**：通过 LLM 修正字幕中的错误（拼写、语法、时间轴偏移等）。
  - **翻译**：将字幕翻译为日语（未来可扩展其他语言）。
- **输入**：
  - 原始字幕文件（SRT 格式）。
  - 目标语言（当前为 `ja`，未来可扩展）。
- **输出**：校准后的字幕文件（SRT 格式），翻译后的字幕文件（SRT 格式，文件名后缀带语言代码，如 `video_ja.srt`）。
- **接口**：定义一个标准化的 HTTP API 接口，供外部 LLM 调用。

### 2.4 UI 集成
- **功能**：
  - 在设置窗口中添加字幕相关选项。
  - 在下载队列中显示字幕状态（是否下载、是否生成、是否翻译）。
- **选项**：
  - 复选框：启用/禁用字幕下载。
  - 文本输入框：指定字幕语言（逗号分隔，如 `en,zh-CN,all`）。
  - 按钮：触发字幕生成、校准和翻译。
- **显示**：下载列表新增列，显示字幕状态（例如 “已下载”、“已生成”、“已翻译”）。

---

## 3. 系统设计

### 3.1 模块划分
字幕功能将划分为以下模块，集成到现有项目中：

#### 3.1.1 字幕下载模块 (`subtitle_downloader.py`)
- **职责**：从视频平台下载字幕，基于 `yt-dlp`。
- **功能**：
  - 检查视频是否有可用字幕。
  - 根据用户设置的语言列表下载字幕。
- **依赖**：`yt-dlp` 库。

#### 3.1.2 字幕生成模块 (`subtitle_generator.py`)
- **职责**：使用语音识别生成字幕。
- **功能**：
  - 提取视频音频。
  - 使用 Whisper 模型进行语音识别。
  - 将识别结果转换为 SRT 格式。
- **依赖**：`pydub`（音频处理）、`whisper`（语音识别）。

#### 3.1.3 字幕处理模块 (`subtitle_processor.py`)
- **职责**：处理字幕文件，包括校准和翻译。
- **功能**：
  - 解析和生成 SRT 文件。
  - 提供接口给 LLM 进行校准和翻译。
- **依赖**：`pysrt`（SRT 文件操作）。

#### 3.1.4 API 模块 (`subtitle_api.py`)
- **职责**：提供 HTTP API 接口，供 LLM 调用。
- **功能**：
  - 接收字幕校准和翻译请求。
  - 返回处理后的字幕。
- **依赖**：`fastapi`（构建 API）。

#### 3.1.5 UI 模块 (更新 `main_window.py`)
- **职责**：在 UI 中集成字幕功能。
- **功能**：
  - 添加字幕设置选项。
  - 显示字幕状态。
  - 提供手动触发按钮。

### 3.2 工作流程
1. **用户设置**：
   - 在设置窗口启用字幕下载并指定语言（如 `en,zh-CN`）。
   - 保存设置到配置文件。
2. **视频下载**：
   - 用户输入视频 URL，触发下载。
   - `DownloadService` 调用 `SubtitleDownloader` 下载字幕（若可用）。
3. **字幕生成**：
   - 如果视频无字幕，调用 `SubtitleGenerator` 使用 Whisper 生成字幕。
4. **字幕校准与翻译**：
   - 用户手动触发校准和翻译。
   - `SubtitleProcessor` 构造请求，调用 `SubtitleAPI`。
   - API 将字幕内容发送给 LLM，获取校准和翻译结果。
5. **结果保存**：
   - 保存校准和翻译后的字幕文件。
   - 更新 UI 显示字幕状态。

---

## 4. 接口定义

### 4.1 内部接口
#### `SubtitleDownloader.download_subtitles`
- **功能**：下载字幕。
- **参数**：
  - `url: str`：视频 URL。
  - `languages: List[str]`：目标语言列表。
  - `output_dir: str`：输出目录。
- **返回值**：`Optional[str]`：字幕文件路径（成功时），或 `None`（失败时）。

#### `SubtitleGenerator.generate_subtitles`
- **功能**：生成字幕。
- **参数**：
  - `video_path: str`：视频文件路径。
  - `language: str`：视频主要语言（默认 `auto`）。
  - `output_dir: str`：输出目录。
- **返回值**：`str`：生成的字幕文件路径。

#### `SubtitleProcessor.process_subtitles`
- **功能**：校准和翻译字幕。
- **参数**：
  - `subtitle_path: str`：字幕文件路径。
  - `target_language: str`：目标语言（例如 `ja`）。
  - `action: str`：操作（`calibrate` 或 `translate`）。
- **返回值**：`str`：处理后的字幕文件路径。

### 4.2 外部 API 接口 (HTTP)
#### `POST /subtitles/calibrate`
- **功能**：校准字幕。
- **请求**：
  ```json
  {
    "subtitle_content": "1\n00:00:01,000 --> 00:00:02,000\nHello, world!",
    "language": "en"
  }
  ```
- **响应**：
  ```json
  {
    "corrected_content": "1\n00:00:01,000 --> 00:00:02,000\nHello, world!"
  }
  ```

#### `POST /subtitles/translate`
- **功能**：翻译字幕。
- **请求**：
  ```json
  {
    "subtitle_content": "1\n00:00:01,000 --> 00:00:02,000\nHello, world!",
    "source_language": "en",
    "target_language": "ja"
  }
  ```
- **响应**：
  ```json
  {
    "translated_content": "1\n00:00:01,000 --> 00:00:02,000\nこんにちは、世界！"
  }
  ```

---

## 5. 实现计划

### 5.1 阶段 1：字幕下载功能
- **目标**：集成字幕下载功能。
- **任务**：
  1. 在 `config.example.json` 中添加字幕设置字段：
     ```json
     "subtitles": {
       "enabled": true,
       "languages": "en,zh-CN,all"
     }
     ```
  2. 更新 `ConfigManager` 支持新字段。
  3. 创建 `SubtitleDownloader` 类，实现 `download_subtitles` 方法。
  4. 修改 `DownloadService.download_item`，添加字幕下载逻辑。
  5. 更新 `MainWindow.open_settings_window`，添加字幕设置 UI。

### 5.2 阶段 2：字幕生成功能
- **目标**：支持无字幕视频的字幕生成。
- **任务**：
  1. 创建 `SubtitleGenerator` 类，使用 Whisper 模型。
  2. 在 `DownloadService` 中添加逻辑：若字幕下载失败，调用 `SubtitleGenerator`。
  3. 在 UI 中添加“生成字幕”按钮。

### 5.3 阶段 3：字幕校准与翻译
- **目标**：支持字幕校准和翻译。
- **任务**：
  1. 创建 `SubtitleProcessor` 类，处理 SRT 文件。
  2. 创建 `SubtitleAPI` 类，使用 FastAPI 提供 HTTP 接口。
  3. 在 UI 中添加“校准字幕”和“翻译字幕”按钮。
  4. 测试与 LLM 的集成（假设 LLM 提供校准和翻译服务）。

### 5.4 阶段 4：测试与优化
- **目标**：确保功能稳定，支持日语翻译，未来可扩展。
- **任务**：
  1. 测试 YouTube 和 bilibili 视频的字幕下载。
  2. 测试 Whisper 模型在不同语言视频上的表现。
  3. 测试 LLM 校准和翻译接口。
  4. 优化 UI 交互和错误提示。

---

## 6. 技术选型

- **字幕下载**：`yt-dlp`（支持多平台字幕下载）。
- **字幕生成**：`whisper`（开源语音识别模型，支持多语言）。
- **字幕处理**：`pysrt`（SRT 文件操作）。
- **API**：`fastapi`（轻量级 HTTP API 框架）。
- **音频处理**：`pydub`（提取视频音频）。

---

## 7. 风险与应对

- **风险 1**：`yt-dlp` 可能因平台更新而失效。
  - **应对**：定期更新 `yt-dlp` 版本，添加错误处理和重试机制。
- **风险 2**：Whisper 模型对某些语言或口音的识别准确率较低。
  - **应对**：提供手动校准选项，依赖 LLM 进行二次修正。
- **风险 3**：LLM API 调用可能有延迟或成本。
  - **应对**：支持本地 LLM 模型（如部署开源模型），优化 API 调用频率。

---

## 8. 未来扩展

- **多语言支持**：扩展翻译目标语言（如韩语、法语等）。
- **字幕样式**：支持 ASS 格式，适配日本观众喜好。
- **批量处理**：支持批量字幕生成和翻译。
- **本地化优化**：集成日本流行语或文化元素提示。

---

## 9. 结论

本设计文档为 **SucoiDownload** 项目添加了字幕模块，覆盖了字幕下载、生成、校准和翻译的需求。通过模块化设计和清晰的接口定义，该功能可无缝集成到现有系统中，并为未来扩展提供了灵活性。下一步将进入实现阶段，优先完成字幕下载功能。